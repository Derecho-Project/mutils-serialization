#pragma once

/**
 * This is an automatically-generated file that implements default serialization
 * support with a series of macros. Do not edit this file by hand; you should
 * generate it with generate_macros.py. The public interface is at the bottom of
 * the file.
 */

#define DEFAULT_SERIALIZE1(a) std::size_t to_bytes(char* ret) const { \
        return mutils::to_bytes(a, ret); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
    } 

#define DEFAULT_SERIALIZE2(a,b) std::size_t to_bytes(char* ret) const { \
        int bytes_written = mutils::to_bytes(a,ret);  \
        return bytes_written + mutils::to_bytes(b,ret + bytes_written); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) + mutils::bytes_size(b) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
        mutils::post_object(f,b); \
    } 

#define DEFAULT_SERIALIZE3(a,b,c) std::size_t to_bytes(char* ret) const { \
        int bytes_written = mutils::to_bytes(a,ret);  \
        bytes_written += mutils::to_bytes(b,ret + bytes_written); \
        return bytes_written + mutils::to_bytes(c,ret + bytes_written); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) + mutils::bytes_size(b) + mutils::bytes_size(c) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
        mutils::post_object(f,b); \
        mutils::post_object(f,c); \
    } 

#define DEFAULT_SERIALIZE4(a,b,c,d) std::size_t to_bytes(char* ret) const { \
        int bytes_written = mutils::to_bytes(a,ret);  \
        bytes_written += mutils::to_bytes(b,ret + bytes_written); \
        bytes_written += mutils::to_bytes(c,ret + bytes_written); \
        return bytes_written + mutils::to_bytes(d,ret + bytes_written); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) + mutils::bytes_size(b) + mutils::bytes_size(c) + mutils::bytes_size(d) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
        mutils::post_object(f,b); \
        mutils::post_object(f,c); \
        mutils::post_object(f,d); \
    } 

#define DEFAULT_SERIALIZE5(a,b,c,d,e) std::size_t to_bytes(char* ret) const { \
        int bytes_written = mutils::to_bytes(a,ret);  \
        bytes_written += mutils::to_bytes(b,ret + bytes_written); \
        bytes_written += mutils::to_bytes(c,ret + bytes_written); \
        bytes_written += mutils::to_bytes(d,ret + bytes_written); \
        return bytes_written + mutils::to_bytes(e,ret + bytes_written); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) + mutils::bytes_size(b) + mutils::bytes_size(c) + mutils::bytes_size(d) + mutils::bytes_size(e) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
        mutils::post_object(f,b); \
        mutils::post_object(f,c); \
        mutils::post_object(f,d); \
        mutils::post_object(f,e); \
    } 

#define DEFAULT_SERIALIZE6(a,b,c,d,e,f) std::size_t to_bytes(char* ret) const { \
        int bytes_written = mutils::to_bytes(a,ret);  \
        bytes_written += mutils::to_bytes(b,ret + bytes_written); \
        bytes_written += mutils::to_bytes(c,ret + bytes_written); \
        bytes_written += mutils::to_bytes(d,ret + bytes_written); \
        bytes_written += mutils::to_bytes(e,ret + bytes_written); \
        return bytes_written + mutils::to_bytes(f,ret + bytes_written); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) + mutils::bytes_size(b) + mutils::bytes_size(c) + mutils::bytes_size(d) + mutils::bytes_size(e) + mutils::bytes_size(f) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
        mutils::post_object(f,b); \
        mutils::post_object(f,c); \
        mutils::post_object(f,d); \
        mutils::post_object(f,e); \
        mutils::post_object(f,f); \
    } 

#define DEFAULT_SERIALIZE7(a,b,c,d,e,f,g) std::size_t to_bytes(char* ret) const { \
        int bytes_written = mutils::to_bytes(a,ret);  \
        bytes_written += mutils::to_bytes(b,ret + bytes_written); \
        bytes_written += mutils::to_bytes(c,ret + bytes_written); \
        bytes_written += mutils::to_bytes(d,ret + bytes_written); \
        bytes_written += mutils::to_bytes(e,ret + bytes_written); \
        bytes_written += mutils::to_bytes(f,ret + bytes_written); \
        return bytes_written + mutils::to_bytes(g,ret + bytes_written); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) + mutils::bytes_size(b) + mutils::bytes_size(c) + mutils::bytes_size(d) + mutils::bytes_size(e) + mutils::bytes_size(f) + mutils::bytes_size(g) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
        mutils::post_object(f,b); \
        mutils::post_object(f,c); \
        mutils::post_object(f,d); \
        mutils::post_object(f,e); \
        mutils::post_object(f,f); \
        mutils::post_object(f,g); \
    } 

#define DEFAULT_SERIALIZE8(a,b,c,d,e,f,g,h) std::size_t to_bytes(char* ret) const { \
        int bytes_written = mutils::to_bytes(a,ret);  \
        bytes_written += mutils::to_bytes(b,ret + bytes_written); \
        bytes_written += mutils::to_bytes(c,ret + bytes_written); \
        bytes_written += mutils::to_bytes(d,ret + bytes_written); \
        bytes_written += mutils::to_bytes(e,ret + bytes_written); \
        bytes_written += mutils::to_bytes(f,ret + bytes_written); \
        bytes_written += mutils::to_bytes(g,ret + bytes_written); \
        return bytes_written + mutils::to_bytes(h,ret + bytes_written); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) + mutils::bytes_size(b) + mutils::bytes_size(c) + mutils::bytes_size(d) + mutils::bytes_size(e) + mutils::bytes_size(f) + mutils::bytes_size(g) + mutils::bytes_size(h) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
        mutils::post_object(f,b); \
        mutils::post_object(f,c); \
        mutils::post_object(f,d); \
        mutils::post_object(f,e); \
        mutils::post_object(f,f); \
        mutils::post_object(f,g); \
        mutils::post_object(f,h); \
    } 

#define DEFAULT_SERIALIZE9(a,b,c,d,e,f,g,h,i) std::size_t to_bytes(char* ret) const { \
        int bytes_written = mutils::to_bytes(a,ret);  \
        bytes_written += mutils::to_bytes(b,ret + bytes_written); \
        bytes_written += mutils::to_bytes(c,ret + bytes_written); \
        bytes_written += mutils::to_bytes(d,ret + bytes_written); \
        bytes_written += mutils::to_bytes(e,ret + bytes_written); \
        bytes_written += mutils::to_bytes(f,ret + bytes_written); \
        bytes_written += mutils::to_bytes(g,ret + bytes_written); \
        bytes_written += mutils::to_bytes(h,ret + bytes_written); \
        return bytes_written + mutils::to_bytes(i,ret + bytes_written); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) + mutils::bytes_size(b) + mutils::bytes_size(c) + mutils::bytes_size(d) + mutils::bytes_size(e) + mutils::bytes_size(f) + mutils::bytes_size(g) + mutils::bytes_size(h) + mutils::bytes_size(i) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
        mutils::post_object(f,b); \
        mutils::post_object(f,c); \
        mutils::post_object(f,d); \
        mutils::post_object(f,e); \
        mutils::post_object(f,f); \
        mutils::post_object(f,g); \
        mutils::post_object(f,h); \
        mutils::post_object(f,i); \
    } 

#define DEFAULT_SERIALIZE10(a,b,c,d,e,f,g,h,i,j) std::size_t to_bytes(char* ret) const { \
        int bytes_written = mutils::to_bytes(a,ret);  \
        bytes_written += mutils::to_bytes(b,ret + bytes_written); \
        bytes_written += mutils::to_bytes(c,ret + bytes_written); \
        bytes_written += mutils::to_bytes(d,ret + bytes_written); \
        bytes_written += mutils::to_bytes(e,ret + bytes_written); \
        bytes_written += mutils::to_bytes(f,ret + bytes_written); \
        bytes_written += mutils::to_bytes(g,ret + bytes_written); \
        bytes_written += mutils::to_bytes(h,ret + bytes_written); \
        bytes_written += mutils::to_bytes(i,ret + bytes_written); \
        return bytes_written + mutils::to_bytes(j,ret + bytes_written); \
    } \
    std::size_t bytes_size() const { \
        return mutils::bytes_size(a) + mutils::bytes_size(b) + mutils::bytes_size(c) + mutils::bytes_size(d) + mutils::bytes_size(e) + mutils::bytes_size(f) + mutils::bytes_size(g) + mutils::bytes_size(h) + mutils::bytes_size(i) + mutils::bytes_size(j) ; \
    } \
    void post_object(const std::function<void (char const * const, std::size_t)>&f ) const { \
        mutils::post_object(f,a); \
        mutils::post_object(f,b); \
        mutils::post_object(f,c); \
        mutils::post_object(f,d); \
        mutils::post_object(f,e); \
        mutils::post_object(f,f); \
        mutils::post_object(f,g); \
        mutils::post_object(f,h); \
        mutils::post_object(f,i); \
        mutils::post_object(f,j); \
    } 

#define DEFAULT_DESERIALIZE2(Name,a) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        return std::make_unique<Name>(*a_obj); \
    } 

#define DEFAULT_DESERIALIZE3(Name,a,b) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        return std::make_unique<Name>(*a_obj, *(mutils::from_bytes<std::decay_t<decltype(b)> >(m, buf + mutils::bytes_size(*a_obj)))); \
    } 

#define DEFAULT_DESERIALIZE4(Name,a,b,c) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        std::size_t bytes_read = mutils::bytes_size(*a_obj); \
        auto b_obj = mutils::from_bytes<std::decay_t<decltype(b)> >(m, buf + bytes_read); \
        return std::make_unique<Name>(*a_obj,*b_obj, *(mutils::from_bytes<std::decay_t<decltype(c)> >(m, buf + bytes_read + mutils::bytes_size(*b_obj)))); \
    } 

#define DEFAULT_DESERIALIZE5(Name,a,b,c,d) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        std::size_t bytes_read = mutils::bytes_size(*a_obj); \
        auto b_obj = mutils::from_bytes<std::decay_t<decltype(b)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*b_obj); \
        auto c_obj = mutils::from_bytes<std::decay_t<decltype(c)> >(m, buf + bytes_read); \
        return std::make_unique<Name>(*a_obj,*b_obj,*c_obj, *(mutils::from_bytes<std::decay_t<decltype(d)> >(m, buf + bytes_read + mutils::bytes_size(*c_obj)))); \
    } 

#define DEFAULT_DESERIALIZE6(Name,a,b,c,d,e) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        std::size_t bytes_read = mutils::bytes_size(*a_obj); \
        auto b_obj = mutils::from_bytes<std::decay_t<decltype(b)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*b_obj); \
        auto c_obj = mutils::from_bytes<std::decay_t<decltype(c)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*c_obj); \
        auto d_obj = mutils::from_bytes<std::decay_t<decltype(d)> >(m, buf + bytes_read); \
        return std::make_unique<Name>(*a_obj,*b_obj,*c_obj,*d_obj, *(mutils::from_bytes<std::decay_t<decltype(e)> >(m, buf + bytes_read + mutils::bytes_size(*d_obj)))); \
    } 

#define DEFAULT_DESERIALIZE7(Name,a,b,c,d,e,f) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        std::size_t bytes_read = mutils::bytes_size(*a_obj); \
        auto b_obj = mutils::from_bytes<std::decay_t<decltype(b)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*b_obj); \
        auto c_obj = mutils::from_bytes<std::decay_t<decltype(c)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*c_obj); \
        auto d_obj = mutils::from_bytes<std::decay_t<decltype(d)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*d_obj); \
        auto e_obj = mutils::from_bytes<std::decay_t<decltype(e)> >(m, buf + bytes_read); \
        return std::make_unique<Name>(*a_obj,*b_obj,*c_obj,*d_obj,*e_obj, *(mutils::from_bytes<std::decay_t<decltype(f)> >(m, buf + bytes_read + mutils::bytes_size(*e_obj)))); \
    } 

#define DEFAULT_DESERIALIZE8(Name,a,b,c,d,e,f,g) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        std::size_t bytes_read = mutils::bytes_size(*a_obj); \
        auto b_obj = mutils::from_bytes<std::decay_t<decltype(b)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*b_obj); \
        auto c_obj = mutils::from_bytes<std::decay_t<decltype(c)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*c_obj); \
        auto d_obj = mutils::from_bytes<std::decay_t<decltype(d)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*d_obj); \
        auto e_obj = mutils::from_bytes<std::decay_t<decltype(e)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*e_obj); \
        auto f_obj = mutils::from_bytes<std::decay_t<decltype(f)> >(m, buf + bytes_read); \
        return std::make_unique<Name>(*a_obj,*b_obj,*c_obj,*d_obj,*e_obj,*f_obj, *(mutils::from_bytes<std::decay_t<decltype(g)> >(m, buf + bytes_read + mutils::bytes_size(*f_obj)))); \
    } 

#define DEFAULT_DESERIALIZE9(Name,a,b,c,d,e,f,g,h) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        std::size_t bytes_read = mutils::bytes_size(*a_obj); \
        auto b_obj = mutils::from_bytes<std::decay_t<decltype(b)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*b_obj); \
        auto c_obj = mutils::from_bytes<std::decay_t<decltype(c)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*c_obj); \
        auto d_obj = mutils::from_bytes<std::decay_t<decltype(d)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*d_obj); \
        auto e_obj = mutils::from_bytes<std::decay_t<decltype(e)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*e_obj); \
        auto f_obj = mutils::from_bytes<std::decay_t<decltype(f)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*f_obj); \
        auto g_obj = mutils::from_bytes<std::decay_t<decltype(g)> >(m, buf + bytes_read); \
        return std::make_unique<Name>(*a_obj,*b_obj,*c_obj,*d_obj,*e_obj,*f_obj,*g_obj, *(mutils::from_bytes<std::decay_t<decltype(h)> >(m, buf + bytes_read + mutils::bytes_size(*g_obj)))); \
    } 

#define DEFAULT_DESERIALIZE10(Name,a,b,c,d,e,f,g,h,i) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        std::size_t bytes_read = mutils::bytes_size(*a_obj); \
        auto b_obj = mutils::from_bytes<std::decay_t<decltype(b)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*b_obj); \
        auto c_obj = mutils::from_bytes<std::decay_t<decltype(c)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*c_obj); \
        auto d_obj = mutils::from_bytes<std::decay_t<decltype(d)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*d_obj); \
        auto e_obj = mutils::from_bytes<std::decay_t<decltype(e)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*e_obj); \
        auto f_obj = mutils::from_bytes<std::decay_t<decltype(f)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*f_obj); \
        auto g_obj = mutils::from_bytes<std::decay_t<decltype(g)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*g_obj); \
        auto h_obj = mutils::from_bytes<std::decay_t<decltype(h)> >(m, buf + bytes_read); \
        return std::make_unique<Name>(*a_obj,*b_obj,*c_obj,*d_obj,*e_obj,*f_obj,*g_obj,*h_obj, *(mutils::from_bytes<std::decay_t<decltype(i)> >(m, buf + bytes_read + mutils::bytes_size(*h_obj)))); \
    } 

#define DEFAULT_DESERIALIZE11(Name,a,b,c,d,e,f,g,h,i,j) \
    static std::unique_ptr<Name> from_bytes(mutils::DeserializationManager* m, char const * buf){ \
        auto a_obj = mutils::from_bytes<std::decay_t<decltype(a)> >(m, buf); \
        std::size_t bytes_read = mutils::bytes_size(*a_obj); \
        auto b_obj = mutils::from_bytes<std::decay_t<decltype(b)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*b_obj); \
        auto c_obj = mutils::from_bytes<std::decay_t<decltype(c)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*c_obj); \
        auto d_obj = mutils::from_bytes<std::decay_t<decltype(d)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*d_obj); \
        auto e_obj = mutils::from_bytes<std::decay_t<decltype(e)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*e_obj); \
        auto f_obj = mutils::from_bytes<std::decay_t<decltype(f)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*f_obj); \
        auto g_obj = mutils::from_bytes<std::decay_t<decltype(g)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*g_obj); \
        auto h_obj = mutils::from_bytes<std::decay_t<decltype(h)> >(m, buf + bytes_read); \
        bytes_read += mutils::bytes_size(*h_obj); \
        auto i_obj = mutils::from_bytes<std::decay_t<decltype(i)> >(m, buf + bytes_read); \
        return std::make_unique<Name>(*a_obj,*b_obj,*c_obj,*d_obj,*e_obj,*f_obj,*g_obj,*h_obj,*i_obj, *(mutils::from_bytes<std::decay_t<decltype(j)> >(m, buf + bytes_read + mutils::bytes_size(*i_obj)))); \
    } 


#define DEFAULT_SERIALIZE_IMPL2(count, ...) DEFAULT_SERIALIZE ## count (__VA_ARGS__)
#define DEFAULT_SERIALIZE_IMPL(count, ...) DEFAULT_SERIALIZE_IMPL2(count, __VA_ARGS__)
#define DEFAULT_SERIALIZE(...) DEFAULT_SERIALIZE_IMPL(VA_NARGS(__VA_ARGS__), __VA_ARGS__)


#define DEFAULT_DESERIALIZE_IMPL2(count, ...) DEFAULT_DESERIALIZE ## count (__VA_ARGS__)
#define DEFAULT_DESERIALIZE_IMPL(count, ...) DEFAULT_DESERIALIZE_IMPL2(count, __VA_ARGS__)
#define DEFAULT_DESERIALIZE(...) DEFAULT_DESERIALIZE_IMPL(VA_NARGS(__VA_ARGS__), __VA_ARGS__)


/**
 * THIS (below) is the only user-facing macro in this file.
 * It's for automatically generating basic serialization support.
 * plop this macro inside the body of a class which extends 
 * ByteRepresentable, providing the name of the class (that you plopped this into)
 * as the first argument and the name of the class's fields as the remaining arguments.
 * Right now we only support up to seven fields; adding more support is easy, just ask if
 * you need.
 *
 * MAJOR CAVEAT: This macro assumes that there is a constructor
 * which takes all the class members (in the order listed). 
 * it's fine if this is a private constructor, but it needs to exist.
 * 
 */

#define DEFAULT_SERIALIZATION_SUPPORT(CLASS_NAME,CLASS_MEMBERS...)		\
        DEFAULT_SERIALIZE(CLASS_MEMBERS) DEFAULT_DESERIALIZE(CLASS_NAME,CLASS_MEMBERS)   \
    void ensure_registered(mutils::DeserializationManager&){}
